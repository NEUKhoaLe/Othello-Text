#BlueJ class context
comment0.target=backup
comment0.text=\r\npublic\ class\ FunctionsFlipper\r\n{\r\n\ \ \ \ FunctionsChecker\ checker\ \=\ new\ FunctionsChecker();\r\n\ \ \ \ public\ FunctionsFlipper()\r\n\ \ \ \ {\r\n\r\n\ \ \ \ }\r\n\ \ \ \ \r\n\ \ \ \ public\ void\ changePieces(\ String[][]\ board,int\ row,\ int\ column,\ int\ turn)\r\n\ \ \ \ {\r\n\ \ \ \ \ \ \ \ String\ myPiece;\r\n\ \ \ \ \ \ \ \ String\ opponent;\r\n\ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ int\ DyMax\ \=\ 7\ -\ row;\r\n\ \ \ \ \ \ \ \ int\ UyMax\ \=\ row;\r\n\ \ \ \ \ \ \ \ int\ LxMax\ \=\ column;\r\n\ \ \ \ \ \ \ \ int\ RxMax\ \=\ 7\ -\ column;\r\n\ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ if\ (turn%2\ \=\=\ 0)\r\n\ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ myPiece\ \=\ "X";\r\n\ \ \ \ \ \ \ \ \ \ \ \ opponent\ \=\ "Y";\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ else\r\n\ \ \ \ \ \ \ \ {\ \ \ myPiece\ \="Y";\r\n\ \ \ \ \ \ \ \ \ \ \ \ opponent\ \=\ "X";\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ if(checker.verticalUpChecker(board,row,column,UyMax,turn)\ \=\=\ true)\r\n\ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ while(board[row][column].equals(opponent)&&row>\=0)\r\n\ \ \ \ \ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ board[row][column]\=myPiece;\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ row--;\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ board[row][column+1]\=myPiece;\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ if(checker.verticalDownChecker(board,row,column,DyMax,turn)\ \=\=\ true)\r\n\ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ while(board[row][column].equals(opponent)&&column>\=0)\r\n\ \ \ \ \ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ board[row][column]\=myPiece;\r\n\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ column--;\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ \ \ board[row][column-1]\=myPiece;\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ if(checker.horizLeftChecker(board,row,column,LxMax,turn)\ \=\=\ true)\r\n\ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ while(board[row][column].equals(opponent)&&row<8)\r\n\ \ \ \ \ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ board[row][column]\=myPiece;\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ row++;\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ \ \ board[row+1][column]\=myPiece;\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ if(checker.horizRightChecker(board,row,column,RxMax,turn)\ \=\=\ true)\r\n\ \ \ \ \ \ \ \ {\ \ \ \ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ \ \ \ \ while(board[row][column].equals(opponent)&&row>\=0)\r\n\ \ \ \ \ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ board[row][column]\=myPiece;\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ row--;\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ board[row-1][column]\=myPiece;\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ if(checker.diagUpLeftChecker(board,\ row,\ column,getMin(RxMax,DyMax),turn)\ \=\=\ true)\r\n\ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ while(board[row+1][column+1].equals(opponent)&&column<\=7&&row<\=7)\r\n\ \ \ \ \ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ board[row][column]\=myPiece;\r\n\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ column++;\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ row++;\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ \ \ board[row][column]\=myPiece;\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ if(checker.diagUpLeftChecker(board,\ row,\ column,getMin(LxMax,UyMax),turn)\ \=\=\ true)\r\n\ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ \ \ \ \ while(board[row-1][column-1].equals(opponent)&&column>\=0&&row>\=0)\r\n\ \ \ \ \ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ board[row][column]\=myPiece;\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ column--;\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ row--;\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ \ \ board[row][column]\=myPiece;\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ if(checker.diagUpLeftChecker(board,\ row,\ column,getMin(LxMax,UyMax),turn)\ \=\=\ true)\r\n\ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ while(board[row+1][column-1].equals(opponent)&&row<8&&column>0)\r\n\ \ \ \ \ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ board[row][column]\=myPiece;\r\n\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ column--;\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ row++;\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ \ \ board[row][column]\=myPiece;\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ if(checker.diagUpLeftChecker(board,\ row,\ column,getMin(RxMax,UyMax),turn)\ \=\=\ true)\r\n\ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ while(board[row-1][column+1].equals(opponent)&&row>0&&column<8)\r\n\ \ \ \ \ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ board[row][column]\=myPiece;\r\n\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ column++;\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ row--;\r\n\ \ \ \ \ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ \ \ \ \ board[row][column]\=myPiece;\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ }\r\n\ \ \ \ \r\n\ \ \ \ public\ int\ getMin(int\ x,\ int\ y)\r\n\ \ \ \ {\r\n\ \ \ \ \ \ \ \ if\ (x\ >\ y)\r\n\ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ return\ y;\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ \ \ \ \ else\r\n\ \ \ \ \ \ \ \ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ return\ x;\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ }\r\n}\r\n\r\n
comment1.params=
comment1.target=backup()
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ backup\r\n
comment2.params=y
comment2.target=int\ sampleMethod(int)
comment2.text=\r\n\ An\ example\ of\ a\ method\ -\ replace\ this\ comment\ with\ your\ own\r\n\r\n\ @param\ \ y\ \ a\ sample\ parameter\ for\ a\ method\r\n\ @return\ \ \ \ the\ sum\ of\ x\ and\ y\r\n
numComments=3
